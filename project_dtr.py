# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'project_dtr.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import mysql
from PyQt5 import QtCore, QtGui, QtWidgets
from db import con
import sys
from PyQt5.QtCore import QVariant, Qt, QDate
from PyQt5.QtGui import QColor
from dialogs import Dialog
from PyQt5.QtWidgets import QMessageBox, QDialog
import win32com.client as win32
from project_activity import Ui_Activity


class Ui_DTR(object):
	ProjectTab=""
	#cell status 
	not_editable = QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled
	editable = QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsEditable
	BtnBack=""
	

	LBProjectTitle = "" #Project Title
	DTRWidget = "" # Widget for DTR List
	DTRWeekList = "" # List of Weeks (DTR)
	LBDateDTR = "" # DTR Week Date Title

	# DTR page Buttons
	BtnPrint = "" # BTN Print
	BtnEdit = "" # BTN Edit DTR Page
	BtnCancel = "" # BTN Cancel DTR Page
	BtnSave = ""
	BtnPrev = "" # Button Prev DTR ( < )
	BtnNext = "" # Button Next DTR ( > )

	#DTR Table Stack
	DTRStack = ""

	#Page Number Indicator
	page_num = 1
	LBPageCount = ""

	# DTR Pages (Null by Default)
	DTR_Pages = []
	# Date Title (Date Title by Default)
	Date_title = "Date Title"
	# List of Employees (Null by Default)
	Employees = ['']
	# List of Dates (Null by Default)
	Dates = ['','','','','','','']

	#total page
	Total_page = 0

	TBLdtr = "" # DTR Table
	LEName = "" # Employee Name
	LEPostion = "" # Employee Position
	projectid=0

	weekvalue=0 #list selection value
	weekarray=[] #list of week multidimentional

	week_list=[] #week on list selection
	week_list2=[]
	employee_id=[]

	currentEmployee=0


	def printDTR():
		cursor = con.cursor()
		cursor.execute(f"SELECT * FROM `projects` WHERE `project_id` = {Ui_DTR.projectid}")
		res = cursor.fetchall()

		projname=res[0][1]
		projsite=res[0][3]
		
		xlApp = win32.Dispatch('Excel.Application')
		xlApp.Visible = True
			# create a new excel workbook
		wb = xlApp.Workbooks.Add()

			# create a new excel worksheet
		ws = wb.worksheets.add
		ws.name ='DTR' 

		added=0
		index=0
		Ui_DTR.page_num=0
		while Ui_DTR.page_num<Ui_DTR.Total_page:
			Ui_DTR.Next()
			rows = []
			columnHeaders = ["","","","","","",""]

			#add border
			ws.Range(ws.cells(6+added, 1),ws.cells(15+added, 8)).verticalalignment=-4108
			ws.Range(ws.cells(6+added, 1),ws.cells(15+added, 8)).horizontalalignment=-4108
			ws.Range(ws.cells(6+added, 1),ws.cells(15+added, 8)).Borders(2).Weight = 3
			ws.Range(ws.cells(6+added, 2),ws.cells(16+added, 8)).Borders(3).Weight = 3
			ws.Range(ws.Cells(6+added,2),ws.Cells(7+added,2)).MergeCells = True
			ws.Range(ws.Cells(6+added,3),ws.Cells(6+added,4)).MergeCells = True
			ws.Range(ws.Cells(6+added,5),ws.Cells(6+added,6)).MergeCells = True
			ws.Range(ws.Cells(6+added,7),ws.Cells(6+added,8)).MergeCells = True
			ws.Range(ws.Cells(15+added,2),ws.Cells(15+added,6)).MergeCells = True

			ws.Range(ws.Cells(1+added,3),ws.Cells(1+added,5)).MergeCells = True
			ws.Range(ws.Cells(2+added,3),ws.Cells(2+added,5)).MergeCells = True
			ws.Range(ws.Cells(3+added,3),ws.Cells(3+added,5)).MergeCells = True
			ws.Range(ws.Cells(4+added,3),ws.Cells(4+added,5)).MergeCells = True
			ws.Range(ws.Cells(5+added,3),ws.Cells(5+added,5)).MergeCells = True

			# retrieve table content
			for row in range(Ui_DTR.TBLdtr.rowCount()):
				record = []

				for col in range(Ui_DTR.TBLdtr.columnCount()):
					if (row>=2) & (row<=8):
						if ((col>=1) & (col<=4))| (col==6):
							val = Ui_DTR.TBLdtr.cellWidget(row,col).value()
							record.append(val)
						else:
							date = Ui_DTR.TBLdtr.item(row, col).text()
							record.append(date)
					else:
						record.append(Ui_DTR.TBLdtr.item(row, col).text())

				rows.append(record)
		
			# insert table content to Excel
			ws.Range(ws.cells(6+added, 2),ws.cells(len(rows)+5+added, len(columnHeaders)+1)).value = rows

			ws.Columns.AutoFit()

			#insert personal Info
			ws.cells(1+added, 2).value = "Name"
			ws.cells(2+added, 2).value = "Position"
			ws.cells(3+added, 2).value = "Project"
			ws.cells(4+added, 2).value = "Location"
			ws.cells(5+added, 2).value = "Period"

			ws.cells(1+added, 3).value = f": {Ui_DTR.LEName.text()}"
			ws.cells(2+added, 3).value = f": {Ui_DTR.LEPostion.text()}"
			ws.cells(3+added, 3).value = f": {projname}"
			ws.cells(4+added, 3).value = f": {projsite}"
			ws.cells(5+added, 3).value = f": {Ui_DTR.week_list2[index]}"
			added=added+16
			index=index+1
			

	def resetData():
		#reset
		Ui_DTR.LBPageCount.setText(f"1 out of {1}")
		Ui_DTR.LEName.setText("")
		Ui_DTR.LEPostion.setText("")
		Ui_DTR.page_num = 1
		Ui_DTR.LBDateDTR.setText(Ui_DTR.Date_title)
		Ui_DTR.BtnPrev.setEnabled(False)
		Ui_DTR.BtnNext.setEnabled(False)
		Ui_DTR.BtnEdit.hide()
		Ui_DTR.BtnPrint.hide()
		Ui_DTR.BtnCancel.hide()
		Ui_DTR.BtnSave.hide()
		Ui_DTR.DTRWeekList.setEnabled(True)
		Ui_DTR.BtnBack.show()

		#reset

		for k in range(2,9):
			for y in range(0,7):
				if ((y==1) | (y==2) | (y==3) | (y==4) | (y==6)):
					Ui_DTR.TBLdtr.removeCellWidget(k, y)
				else:
					item = QtWidgets.QTableWidgetItem()
					item.setTextAlignment(QtCore.Qt.AlignCenter)
					item.setText("")
					item.setFlags(Ui_DTR.not_editable) #Disable item edit
					Ui_DTR.TBLdtr.setItem(k, y, item)


		trh = QtWidgets.QTableWidgetItem()
		trh = Ui_DTR.TBLdtr.item(9,5)
		trh.setTextAlignment(QtCore.Qt.AlignCenter)
		trh.setText("")

		tot = QtWidgets.QTableWidgetItem()
		tot = Ui_DTR.TBLdtr.item(9,6)
		tot.setTextAlignment(QtCore.Qt.AlignCenter)
		tot.setText("")

	def editDTR(BtnBack):

		Ui_DTR.insert_data(True)
		Ui_DTR.BtnEdit.hide()
		Ui_DTR.BtnCancel.show()
		Ui_DTR.BtnSave.show()


		Ui_DTR.BtnPrint.hide()
		Ui_DTR.BtnPrev.hide()
		Ui_DTR.BtnNext.hide()

		BtnBack.hide()

		Ui_DTR.ProjectTab.setEnabled(False)
		Ui_DTR.DTRWeekList.setEnabled(False)

	def cancelEdit(BtnBack):

		if (Dialog.confirm_dialog("Are you sure you want to discard changes?") == QMessageBox.Ok):
			Ui_DTR.insert_data(False)
			Ui_DTR.BtnEdit.show()
			Ui_DTR.BtnCancel.hide()
			Ui_DTR.BtnSave.hide()


			Ui_DTR.BtnPrint.show()
			Ui_DTR.BtnPrev.show()
			Ui_DTR.BtnNext.show()

			BtnBack.show()

			Ui_DTR.DTRWeekList.setEnabled(True)
			Ui_DTR.ProjectTab.setEnabled(True)


	def saveEdit(BtnBack):
		if (Dialog.confirm_dialog("Are you sure you want to update changes?") == QMessageBox.Ok):
			cursor = con.cursor()
			totalrh=0
			totalot=0

			invalid = False
			row_invalid = ""

			for k in range(2,9):

				if (Ui_DTR.TBLdtr.item(k,0).text() == ""):
					continue

				in_AM = Ui_DTR.TBLdtr.cellWidget(k,1).value()
				out_AM = Ui_DTR.TBLdtr.cellWidget(k,2).value()
				in_PM = Ui_DTR.TBLdtr.cellWidget(k,3).value()
				out_PM = Ui_DTR.TBLdtr.cellWidget(k,4).value()
				ot = Ui_DTR.TBLdtr.cellWidget(k,6).value()



				if (in_AM >= out_AM and in_AM != 0 and out_AM != 0) | (in_PM >= out_PM and in_PM != 0 and out_PM != 0) | (in_AM == 0 and out_AM > 0) | (in_PM == 0 and out_PM > 0) | (in_AM < 8 and in_AM != 0 ):
					invalid = True
					row_invalid = row_invalid + ", " + (str(k-1))

			if invalid == False:
			   
				#computation
				for k in range(2,9):
					date = Ui_DTR.TBLdtr.item(k,0).text()
					if len(date)>0:
						date=QDate(Ui_DTR.process_date2(date))
						date = date.toString("yyyy,MM,dd")

						in_AM = Ui_DTR.TBLdtr.cellWidget(k,1).value()
						out_AM = Ui_DTR.TBLdtr.cellWidget(k,2).value()
						in_PM = Ui_DTR.TBLdtr.cellWidget(k,3).value()
						out_PM = Ui_DTR.TBLdtr.cellWidget(k,4).value()

						AM = 0
						PM = 0

						if int(out_AM)>0:
							AM = int(out_AM)-int(in_AM)
						if int(out_PM)>0:
							PM = int(out_PM)-int(in_PM)
						total = AM+PM

						totalrh=totalrh+total

						rh = QtWidgets.QTableWidgetItem()
						rh = Ui_DTR.TBLdtr.item(k,5)
						rh.setTextAlignment(QtCore.Qt.AlignCenter)
						rh.setText(str(total))
						ot = Ui_DTR.TBLdtr.cellWidget(k,6).value()
						totalot = totalot + int(ot)
						try:
							#update db
							query2 = f"UPDATE `projectdtr` SET `AM_TimeIn`={in_AM} ,`AM_TimeOut`={out_AM} ,`PM_TimeIn`={in_PM}, `PM_TimeOut`={out_PM} ,`RH`={total} ,`OT`={ot} WHERE `date`='{date}' AND `employee_id`={Ui_DTR.currentEmployee}"
							cursor.execute(query2)
							con.commit()
						except :
							Dialog.msg_dialog(str(sys.exc_info()))          


				trh = QtWidgets.QTableWidgetItem()
				trh = Ui_DTR.TBLdtr.item(9,5)
				trh.setTextAlignment(QtCore.Qt.AlignCenter)
				trh.setText(str(totalrh))

				tot = QtWidgets.QTableWidgetItem()
				tot = Ui_DTR.TBLdtr.item(9,6)
				tot.setTextAlignment(QtCore.Qt.AlignCenter)
				tot.setText(str(totalot))

				# update payroll
				cursor.execute(f"SELECT * FROM `projectdtr` WHERE `project_id`={Ui_DTR.projectid} AND `employee_id`={Ui_DTR.currentEmployee}")
				res1 = cursor.fetchall()


				cursor.execute(f"SELECT * FROM `project_payroll` WHERE `project_id`={Ui_DTR.projectid} AND `employee_id`={Ui_DTR.currentEmployee}")
				res4 = cursor.fetchall()

				startDate=[]
				endDate=[]
			
				for x in res4:
					startDate.append(x[3])
					endDate.append(x[4])

				for x in range(0,len(startDate)):
					dateZ=""
					dateX=""
					dateY=""
					TRH=0
					OT=0

					dateX=QDate(Ui_DTR.process_date(startDate[x]))
					dateY=QDate(Ui_DTR.process_date(endDate[x]))    

					for y in res1:#cdtr
						dateZ= QDate(Ui_DTR.process_date(y[3]))
						if (dateZ>=dateX) & (dateZ<=dateY):
							TRH=TRH+int(y[8])
							OT=OT+int(y[9])


					#update payroll week ot and rh
					d1=dateX.toString("yyyy,MM,dd")
					d2=dateY.toString("yyyy,MM,dd")


					query2 = f"UPDATE `project_payroll` SET `TRH`={TRH},`OT`={OT} WHERE `startDate`='{d1}' AND `endDate`='{d2}' AND `employee_id`={Ui_DTR.currentEmployee} AND `project_id`={Ui_DTR.projectid}"
					cursor.execute(query2)
					con.commit()


				#update full payroll
				cursor.execute(f"SELECT * FROM `project_payroll` WHERE `project_id`={Ui_DTR.projectid} AND `employee_id`={Ui_DTR.currentEmployee}")
				res = cursor.fetchall()

				for x in res:
					rateDay=float(x[7])*8
					AmountReg=float(x[7])*float(x[8])
					AmountOT=float(x[9])*float(x[7])
					AmountOT= AmountOT + (float(AmountOT)*0.3)
					TotalAmount = AmountReg+AmountOT+x[10]
					Netpay=TotalAmount+x[12]

					query2 = f"UPDATE `project_payroll` SET `rateDay`={rateDay}, `AmountReg`={AmountReg}, `AmountOT`={AmountOT}, `TotalAmount`={TotalAmount}, `Netpay`={Netpay} WHERE `id`={x[0]}"
					cursor.execute(query2)
					con.commit()

				Ui_DTR.insert_data(False)
				Ui_DTR.BtnEdit.show()
				Ui_DTR.BtnCancel.hide()
				Ui_DTR.BtnSave.hide()
				Ui_DTR.BtnPrint.show()
				Ui_DTR.BtnPrev.show()
				Ui_DTR.BtnNext.show()
				Ui_DTR.DTRWeekList.setEnabled(True)
				BtnBack.show()
				Ui_DTR.ProjectTab.setEnabled(True)
				Dialog.msg_dialog("DTR has been updated")

				Ui_Activity.record_activity("admin",f"Update Daily Time Record of {Ui_DTR.LEName.text()}")


			else:
				row_invalid = row_invalid.replace(",","",1)
				Dialog.msg_dialog(f"DTR Update Unsuccessful \u2794 Invalid Input at Row(s) {row_invalid.strip()}")


	def getEmployees():
		Ui_DTR.resetData()
		cursor = con.cursor()
		Ui_DTR.employee_id=[]
		cursor.execute(f"SELECT * FROM `projecte` WHERE `project_id` = {Ui_DTR.projectid}")
		res = cursor.fetchall()
		for x in res:
			Ui_DTR.employee_id.append(x[2])

		#set total page 
		Ui_DTR.Total_page=len(Ui_DTR.employee_id)


	def  getdtrinfo(item):
		# Insert Data in the table

		Ui_DTR.weekvalue=item.value
			
		Ui_DTR.LBDateDTR.setText(Ui_DTR.week_list2[Ui_DTR.weekvalue])
		Ui_DTR.LBPageCount.setText(f"1 out of {Ui_DTR.Total_page}")
		if len(Ui_DTR.employee_id)>0:
			Ui_DTR.BtnPrev.setEnabled(True)
			Ui_DTR.BtnNext.setEnabled(True)

			Ui_DTR.page_num = 1
			Ui_DTR.BtnEdit.show()
			Ui_DTR.BtnPrint.show()


			Ui_DTR.insert_data(False)

		
	def produce_table():

		#Sample
		#Ui_DTR.Employees = ['haha','s Ong','g Ong','Francis g']
		#Ui_DTR.Total_page = len(Ui_DTR.Employees)

		# Produce Table DTR (Null By Default - For Initial Display Only)
		# May vary in Employee List
		for x in Ui_DTR.Employees:
			# Table 
			Ui_DTR.Table(Ui_DTR.Employees.index(x))
			Ui_DTR.Total_page = Ui_DTR.Total_page + 1

	def Next():
		# MaxPages Limit
		if Ui_DTR.page_num < Ui_DTR.Total_page:
			Ui_DTR.page_num=Ui_DTR.page_num+1
			Ui_DTR.LBPageCount.setText(f"{Ui_DTR.page_num} out of {Ui_DTR.Total_page}")
			Ui_DTR.insert_data(False)
			
	def Prev():
		# Page 1 Limit
		if Ui_DTR.page_num > 1:
			Ui_DTR.page_num=Ui_DTR.page_num-1
			Ui_DTR.LBPageCount.setText(f"{Ui_DTR.page_num} out of {Ui_DTR.Total_page}")
			Ui_DTR.insert_data(False)

	def process_date(bday):
		index = 0
		start = 0
		flag1 = True
		flag2 = False
		flag3 = False

		while index < len(bday):
			if flag1 and (bday[index] == ","):
				year = bday[start:index]
				start = index + 1
				flag1 = False
				flag2 = True
			elif flag2 and (bday[index] == ","):
				month = bday[start:index]
				start = index + 1
				flag2 = False
				flag3 = True
			if flag3:
				day = bday[start:len(bday)]
				break
			index = index + 1

		return QDate(int(year), int(month), int(day))

	def process_date2(bday):
		index = 0
		start = 0
		flag1 = True
		flag2 = False
		flag3 = False

		while index < len(bday):
			if flag1 and (bday[index] == "/"):
				year = bday[start:index]
				start = index + 1
				flag1 = False
				flag2 = True
			elif flag2 and (bday[index] == "/"):
				month = bday[start:index]
				start = index + 1
				flag2 = False
				flag3 = True
			if flag3:
				day = bday[start:len(bday)]
				break
			index = index + 1

		return QDate(int(day), int(year), int(month))
		
	def insert_week():
		Ui_DTR.getEmployees()
		Ui_DTR.week_list = []
		Ui_DTR.week_list2 = []
		startdate=""
		enddate=""

		Ui_DTR.weekarray=[]

		try:
			cursor = con.cursor()
			cursor.execute(f"SELECT * FROM `projects` WHERE `project_id`={Ui_DTR.projectid}")
			res = cursor.fetchall()
			for x in res:
				startdate=QDate(Ui_DTR.process_date(x[4]))
				enddate=QDate(Ui_DTR.process_date(x[5]))




			while startdate<enddate:
				array=[]
				week=""
				week2=""
				for i in range(0,7):
					array.append(startdate.toString("yyyy,MM,dd"))
					
					if i==0:
						week= week+startdate.toString("MM/dd/yyyy")
						week2= week2+startdate.toString("MM/dd/yyyy")
					if startdate==enddate:
						week2 = week2+"  -  "+startdate.toString("MM/dd/yyyy")
						Ui_DTR.week_list2.append(week2)
						week = startdate.toString("MM/dd/yyyy")+"  -  "+ week
						Ui_DTR.week_list.append(week)
						break
					if i==6:
						week2 =week2 +"  -  "+ startdate.toString("MM/dd/yyyy")
						Ui_DTR.week_list2.append(week2)
						week =startdate.toString("MM/dd/yyyy") +"  -  "+ week
						Ui_DTR.week_list.append(week)
					startdate=startdate.addDays(1)
				Ui_DTR.weekarray.append(array)
		

		except:
			Dialog.msg_dialog(str(sys.exc_info()))  

		Ui_DTR.DTRWeekList.clear()
		index = 0
		while index < len(Ui_DTR.week_list):
			item = QtWidgets.QListWidgetItem()
			item.setTextAlignment(QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
			item.setBackground(QColor('#666666')) if (index % 2) == 0 else item.setBackground(QColor('#595959'))
			item.value=index
			Ui_DTR.DTRWeekList.addItem(item)
			item = Ui_DTR.DTRWeekList.item(index)
			item.setText(Ui_DTR.week_list[index])
			index = index + 1

	def insert_data(status):
		cursor = con.cursor()
		if len(Ui_DTR.employee_id)>0:
			try:
				cursor.execute(f"SELECT * FROM `employees` WHERE `id` ={Ui_DTR.employee_id[Ui_DTR.page_num-1]}")
				res = cursor.fetchall()
				full_name = (f"{res[0][1]}, {res[0][2]} {res[0][3]}.")
				Ui_DTR.LEName.setText(full_name)
				Ui_DTR.LEPostion.setText(res[0][15])

				Ui_DTR.currentEmployee=Ui_DTR.employee_id[Ui_DTR.page_num-1]

				cursor.execute(f"SELECT * FROM `projectdtr` WHERE `project_id` = {Ui_DTR.projectid} AND `employee_id`={Ui_DTR.employee_id[Ui_DTR.page_num-1]}")
				res = cursor.fetchall()
				row=2

				#Font for Input
				font = QtGui.QFont()
				font.setFamily("Calibri")
				font.setPointSize(12)
				# Regex
				my_regex = QtCore.QRegExp("^\\d{1,2}()?$")

				#reset
				for k in range(2,9):
					for y in range(0,7):

						SpinHour = QtWidgets.QSpinBox(Ui_DTR.TBLdtr)
						SpinHour.setGeometry(QtCore.QRect(260, 260, 42, 22))
						SpinHour.setFont(font)
						SpinHour.setLayoutDirection(QtCore.Qt.LeftToRight)
						SpinHour.setAlignment(QtCore.Qt.AlignCenter)
						SpinHour.setAutoFillBackground(False)
						SpinHour.setFrame(False)
						SpinHour.setEnabled(status)
						SpinHour.setObjectName("SpinHour")
			  
						item = QtWidgets.QTableWidgetItem()
						item.setTextAlignment(QtCore.Qt.AlignCenter)
						item.setText("")

						if (y == 1) or (y == 2):
							#my_validator = QtGui.QRegExpValidator(my_regex,LEHour)
							#LEHour.setValidator(my_validator)
							SpinHour.setMinimum(0)
							SpinHour.setMaximum(12)
							Ui_DTR.TBLdtr.setCellWidget(k, y, SpinHour)
						elif (y == 3) or (y == 4):
							SpinHour.setMinimum(0)
							SpinHour.setMaximum(5)
							Ui_DTR.TBLdtr.setCellWidget(k, y, SpinHour)
						elif y==6:
							Ui_DTR.TBLdtr.setCellWidget(k, y, SpinHour)
						else:
							Ui_DTR.TBLdtr.setItem(k, y, item)
						


				totalrh=0
				totalot=0
				for j in range(0,len(Ui_DTR.weekarray[Ui_DTR.weekvalue])):

					for x in res:
						if Ui_DTR.weekarray[Ui_DTR.weekvalue][j]==x[3]:

							
							index = 3
							cap=24
							for y in range(0,7):
								
								item = QtWidgets.QTableWidgetItem()
								item.setTextAlignment(QtCore.Qt.AlignCenter)
								if y==0:
									date=QDate(Ui_DTR.process_date(x[index]))
									item.setText(date.toString("MM/dd/yyyy"))
									item.setFlags(Ui_DTR.not_editable)
									Ui_DTR.TBLdtr.setItem(row, y, item)
								elif y==5:
									item.setText(str(x[index]))
									item.setFlags(Ui_DTR.not_editable) 
									Ui_DTR.TBLdtr.setItem(row, y, item)
									cap=cap-int(x[index])
								else:
									if y==6:
										if cap>16:
											cap=16
										Ui_DTR.TBLdtr.cellWidget(row, y).setMaximum(cap)

									Ui_DTR.TBLdtr.cellWidget(row, y).setValue(int(x[index]))

								#Ui_DTR.TBLdtr.setItem(row, y, item)

								index = index + 1
							totalrh=totalrh+x[8]
							totalot=totalot+x[9]

							row=row+1

				# Remove Uneccessary Widgets
				for x in range(2,9):
					for y in range(0,7):
						if (Ui_DTR.TBLdtr.item(x, 0).text() == ""):
							Ui_DTR.TBLdtr.removeCellWidget(x,y)

				trh = QtWidgets.QTableWidgetItem()
				trh = Ui_DTR.TBLdtr.item(9,5)
				trh.setTextAlignment(QtCore.Qt.AlignCenter)
				trh.setText(str(totalrh))

				tot = QtWidgets.QTableWidgetItem()
				tot = Ui_DTR.TBLdtr.item(9,6)
				tot.setTextAlignment(QtCore.Qt.AlignCenter)
				tot.setText(str(totalot))

				 

			except mysql.connector.Error as e:
				Dialog.msg_dialog(str(sys.exc_info()))  
				#Ui_PEForm.show_dialog(e)

	def PDTR(ProjectDTR,BtnBack,ProjectTab):


		#Font for Title
		font = QtGui.QFont()
		font.setFamily("Calibri")
		font.setPointSize(16)
		font.setBold(True)
		font.setWeight(75)

		# -----------------------Project DTR Start-------------------------

		# DTR Title 
		LBDTRTitle = QtWidgets.QLabel(ProjectDTR)
		LBDTRTitle.setGeometry(QtCore.QRect(10, 10, 271, 31))
		LBDTRTitle.setFont(font)
		LBDTRTitle.setStyleSheet("color: rgb(255, 255, 255);")
		LBDTRTitle.setAlignment(QtCore.Qt.AlignCenter)
		LBDTRTitle.setObjectName("LBDTRTitle")


		#Font Normal (12)
		font.setPointSize(12)

		# Print Button
		Ui_DTR.BtnPrint = QtWidgets.QPushButton(ProjectDTR)
		Ui_DTR.BtnPrint.setGeometry(QtCore.QRect(100, 370, 100, 31))
		Ui_DTR.BtnPrint.setFont(font)
		Ui_DTR.BtnPrint.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
		Ui_DTR.BtnPrint.setStyleSheet("background-color: rgb(0, 0, 0.9);color: rgb(255, 255, 255);border-radius:5px;")
		#set Icon Print BTN
		icon = QtGui.QIcon()
		icon.addPixmap(QtGui.QPixmap(":/Icons/Assets/PrintIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
		Ui_DTR.BtnPrint.setIcon(icon)
		Ui_DTR.BtnPrint.setObjectName("Ui_DTR.BtnPrint")

		#DTR Scroll Area
		DTRScroll = QtWidgets.QScrollArea(ProjectDTR)
		DTRScroll.setEnabled(True)
		DTRScroll.setGeometry(QtCore.QRect(10, 50, 281, 301))
		DTRScroll.setStyleSheet("background-color: rgb(120, 120,120,.3);border-radius:8px;")
		DTRScroll.setWidgetResizable(True)
		DTRScroll.setObjectName("DTRScroll")

		# DTR Widget > Scroll
		DTRWidget = QtWidgets.QWidget()
		DTRWidget.setEnabled(True)
		DTRWidget.setGeometry(QtCore.QRect(0, 0, 281, 301))
		DTRWidget.setObjectName("DTRWidget")

		# List > DTR Widget
		Ui_DTR.DTRWeekList = QtWidgets.QListWidget(DTRWidget)
		Ui_DTR.DTRWeekList.setGeometry(QtCore.QRect(0, 0, 281, 301))
		Ui_DTR.DTRWeekList.setLayoutDirection(QtCore.Qt.RightToLeft)
		Ui_DTR.DTRWeekList.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
		Ui_DTR.DTRWeekList.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
		Ui_DTR.DTRWeekList.setObjectName("DTRWeekList")
		Ui_DTR.DTRWeekList.setStyleSheet("background-color: rgb(167, 167, 167,.4);\n"
									"border-radius:5px;\n"
									"font-size:18px;\n"
									"color:white;\n"

									"")



		
		#setWidget At Scroll Area
		DTRScroll.setWidget(DTRWidget)

		Ui_DTR.LBDateDTR = QtWidgets.QLabel(ProjectDTR)
		Ui_DTR.LBDateDTR.setGeometry(QtCore.QRect(310, 10, 311, 31))

		#set Font 16
		font.setPointSize(16)

		# DTR Title (Week)
		Ui_DTR.LBDateDTR.setFont(font)
		Ui_DTR.LBDateDTR.setStyleSheet("background-color: rgb(148, 0, 2,.4);border-radius:8px;color:white;")
		Ui_DTR.LBDateDTR.setAlignment(QtCore.Qt.AlignCenter)
		Ui_DTR.LBDateDTR.setObjectName("LBDate")

		# Font set (12)
		font.setPointSize(12)

		# Edit Button
		Ui_DTR.BtnEdit = QtWidgets.QPushButton(ProjectDTR)
		Ui_DTR.BtnEdit.setGeometry(QtCore.QRect(630, 10, 100, 31))
		Ui_DTR.BtnEdit.setFont(font)
		Ui_DTR.BtnEdit.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
		Ui_DTR.BtnEdit.setStyleSheet("background-color: rgb(0, 0, 0.9);color: rgb(255, 255, 255);border-radius:5px;")
		#set icon Edit Button
		icon1 = QtGui.QIcon()
		icon1.addPixmap(QtGui.QPixmap(":/Icons/Assets/EditIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
		Ui_DTR.BtnEdit.setIcon(icon1)
		Ui_DTR.BtnEdit.setObjectName("BtnEdit")

		# BtnCancel
		Ui_DTR.BtnCancel = QtWidgets.QPushButton(ProjectDTR)
		Ui_DTR.BtnCancel.setGeometry(QtCore.QRect(630, 10, 100, 31))
		Ui_DTR.BtnCancel.setFont(font)
		Ui_DTR.BtnCancel.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
		Ui_DTR.BtnCancel.setStyleSheet("background-color: rgb(0, 0, 0.9);color: rgb(255, 255, 255);border-radius:5px;")
		#set icon Edit Button
		icon1 = QtGui.QIcon()
		icon1.addPixmap(QtGui.QPixmap(":/Icons/Assets/CancelIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
		Ui_DTR.BtnCancel.setIcon(icon1)
		Ui_DTR.BtnCancel.setObjectName("BtnCancel")
		Ui_DTR.BtnCancel.hide()


		# BtnSave
		Ui_DTR.BtnSave = QtWidgets.QPushButton(ProjectDTR)
		Ui_DTR.BtnSave.setGeometry(QtCore.QRect(745, 10, 100, 31))
		Ui_DTR.BtnSave.setFont(font)
		Ui_DTR.BtnSave.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
		Ui_DTR.BtnSave.setStyleSheet("background-color: rgb(0, 0, 0.9);color: rgb(255, 255, 255);border-radius:5px;")
		#set icon Edit Button
		icon1 = QtGui.QIcon()
		icon1.addPixmap(QtGui.QPixmap(":/Icons/Assets/SaveIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
		Ui_DTR.BtnSave.setIcon(icon1)
		Ui_DTR.BtnSave.setObjectName("BtnSave")
		Ui_DTR.BtnSave.hide()

		# DTR Page Prev Button
		Ui_DTR.BtnPrev = QtWidgets.QPushButton(ProjectDTR)
		Ui_DTR.BtnPrev.setGeometry(QtCore.QRect(860, 10, 31, 31))
		Ui_DTR.BtnPrev.setFont(font)
		Ui_DTR.BtnPrev.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
		Ui_DTR.BtnPrev.setStyleSheet("background-color: rgb(148, 0, 2,.4);border-radius:8px;color:white;")
		Ui_DTR.BtnPrev.setObjectName("BtnPrev")

		# DTR Page Next Button
		Ui_DTR.BtnNext = QtWidgets.QPushButton(ProjectDTR)
		Ui_DTR.BtnNext.setGeometry(QtCore.QRect(1020, 10, 31, 31))
		Ui_DTR.BtnNext.setFont(font)
		Ui_DTR.BtnNext.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
		Ui_DTR.BtnNext.setStyleSheet("background-color: rgb(148, 0, 2,.4);border-radius:8px;color:white;")
		Ui_DTR.BtnNext.setObjectName("BtnNext")


		# Page Count ( 1 out of 1 )
		Ui_DTR.LBPageCount = QtWidgets.QLabel(ProjectDTR)
		Ui_DTR.LBPageCount.setGeometry(QtCore.QRect(900, 10, 111, 31))

		Ui_DTR.LBPageCount.setFont(font)
		Ui_DTR.LBPageCount.setStyleSheet("background-color: rgb(148, 0, 2,.4);border-radius:8px;color:white;")
		Ui_DTR.LBPageCount.setAlignment(QtCore.Qt.AlignCenter)
		Ui_DTR.LBPageCount.setObjectName("LBPageCount")



		# Stack DTR Pages
		Ui_DTR.DTRStack = QtWidgets.QStackedWidget(ProjectDTR)
		Ui_DTR.DTRStack.setGeometry(QtCore.QRect(310, 50, 741, 371))
		Ui_DTR.DTRStack.setObjectName("DTRStack")
		
		_translate = QtCore.QCoreApplication.translate
		LBDTRTitle.setText(_translate("DashbaordWindow", "Daily Time Record"))
		Ui_DTR.BtnPrint.setText(_translate("DashbaordWindow", "  Print"))
		__sortingEnabled = Ui_DTR.DTRWeekList.isSortingEnabled()
		Ui_DTR.DTRWeekList.setSortingEnabled(False)

		Ui_DTR.DTRWeekList.setSortingEnabled(__sortingEnabled)
		Ui_DTR.BtnEdit.setText(_translate("DashbaordWindow", "Edit"))
		Ui_DTR.BtnCancel.setText(_translate("DashbaordWindow", "Cancel"))
		Ui_DTR.BtnSave.setText(_translate("DashbaordWindow", "Save"))
		Ui_DTR.BtnPrev.setText(_translate("DashbaordWindow", "<"))
		Ui_DTR.BtnNext.setText(_translate("DashbaordWindow", ">"))
		
		Ui_DTR.LBPageCount.setText(_translate("DashbaordWindow", (f"1 out of {Ui_DTR.Total_page}")))


		#Product Table (Null By Default)
		Ui_DTR.produce_table()
		# Next Button Change
		Ui_DTR.BtnNext.clicked.connect(Ui_DTR.Next)
		# Prev Button Change
		Ui_DTR.BtnPrev.clicked.connect(Ui_DTR.Prev)

		#edit Btn
		Ui_DTR.BtnEdit.clicked.connect(lambda: Ui_DTR.editDTR(BtnBack))
		
		#cancel Btn
		Ui_DTR.BtnCancel.clicked.connect(lambda: Ui_DTR.cancelEdit(BtnBack))

		#save Btn
		Ui_DTR.BtnSave.clicked.connect(lambda: Ui_DTR.saveEdit(BtnBack))

		#print btn
		Ui_DTR.BtnPrint.clicked.connect(lambda: Ui_DTR.printDTR())
		Ui_DTR.BtnPrint.hide()

		# selection function
		Ui_DTR.DTRWeekList.itemClicked.connect(Ui_DTR.getdtrinfo)

		Ui_DTR.LEName.setEnabled(False)
		Ui_DTR.LEPostion.setEnabled(False)
		Ui_DTR.BtnEdit.hide()

		Ui_DTR.BtnBack=BtnBack
		Ui_DTR.ProjectTab=ProjectTab

	
		
	def Table(page):

		#DTR Page Widget
		DTRPage = QtWidgets.QWidget()
		DTRPage.setObjectName("DTRPage")

		#BG DTR
		BgDTR = QtWidgets.QLabel(DTRPage)
		BgDTR.setGeometry(QtCore.QRect(0, 0, 741, 371))
		BgDTR.setStyleSheet("background-color: rgb(148, 0, 2,.4);border-radius:8px;")
		BgDTR.setText("")
		BgDTR.setObjectName("BGDTR")

		#DTR Group
		DTRGroup = QtWidgets.QGroupBox(DTRPage)
		DTRGroup.setGeometry(QtCore.QRect(10, 10, 721, 345))
		DTRGroup.setStyleSheet("border:none;border-radius:8px;color:white;")
		DTRGroup.setTitle("")
		DTRGroup.setObjectName("DTRGroup")

		# BG2 DTR
		BgDTR_2 = QtWidgets.QLabel(DTRGroup)
		BgDTR_2.setGeometry(QtCore.QRect(0, 0, 721, 345))
		BgDTR_2.setStyleSheet("background-color:rgba(40,0,0,.5);")
		BgDTR_2.setText("")
		BgDTR_2.setAlignment(QtCore.Qt.AlignCenter)
		BgDTR_2.setObjectName("BGDTR_2")

		#FOnt Properties
		font = QtGui.QFont()
		font.setFamily("Calibri")
		font.setPointSize(12)
		font.setBold(True)
		font.setWeight(75)

		#Label Employee Name
		LBName = QtWidgets.QLabel(DTRGroup)
		LBName.setGeometry(QtCore.QRect(10, 13, 71, 11))
		LBName.setFont(font)
		LBName.setObjectName("LBName")

		#Input Employee Name
		font.setBold(False)
		Ui_DTR.LEName = QtWidgets.QLineEdit(DTRGroup)
		Ui_DTR.LEName.setGeometry(QtCore.QRect(90, 12, 321, 18))
		Ui_DTR.LEName.setFont(font)
		Ui_DTR.LEName.setObjectName("LEName")

		#DTR Table
		Ui_DTR.TBLdtr = QtWidgets.QTableWidget(DTRGroup)
		Ui_DTR.TBLdtr.setGeometry(QtCore.QRect(10, 40, 701, 295))
		Ui_DTR.TBLdtr.setFont(font)
		Ui_DTR.TBLdtr.setStyleSheet("QTableWidget::item{border:1px solid white;}QTableWidget{border:1px solid white;}")
		Ui_DTR.TBLdtr.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
		Ui_DTR.TBLdtr.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
		Ui_DTR.TBLdtr.setShowGrid(True)
		Ui_DTR.TBLdtr.setWordWrap(True)
		Ui_DTR.TBLdtr.setCornerButtonEnabled(True)
		Ui_DTR.TBLdtr.setColumnCount(7)
		Ui_DTR.TBLdtr.setObjectName("TBLdtr")
		Ui_DTR.TBLdtr.setRowCount(10)

		_translate = QtCore.QCoreApplication.translate

		
		# Vertical Header Add item (Hidden)
		for x in range(0,10):
			item = QtWidgets.QTableWidgetItem()
			item.setTextAlignment(QtCore.Qt.AlignCenter)
			Ui_DTR.TBLdtr.setVerticalHeaderItem(x, item)

		# Horizontal Header Add item (Hidden)
		for x in range(0,7):
			item = QtWidgets.QTableWidgetItem()
			item.setTextAlignment(QtCore.Qt.AlignCenter)
			Ui_DTR.TBLdtr.setHorizontalHeaderItem(x, item)

		# Font for Headers
		font.setBold(True)

		# "Date" Header (Seperate for Rowspan)
		item = QtWidgets.QTableWidgetItem()
		item.setFont(font)
		item.setTextAlignment(QtCore.Qt.AlignCenter)

		# Header 1st Row
		for x in range(0,7):
			item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
			Ui_DTR.TBLdtr.setItem(0, x, item)
			item = QtWidgets.QTableWidgetItem()
			item.setFont(font)
			item.setTextAlignment(QtCore.Qt.AlignCenter)

		# Header 2nd Row
		for x in range(0,7):
			item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
			Ui_DTR.TBLdtr.setItem(1, x, item)
			item = QtWidgets.QTableWidgetItem()
			item.setFont(font)
			item.setTextAlignment(QtCore.Qt.AlignCenter)

		# Dates
		for x in range(2,10):
			item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
			Ui_DTR.TBLdtr.setItem(x, 0, item)
			item = QtWidgets.QTableWidgetItem()
			item.setFont(font)
			item.setTextAlignment(QtCore.Qt.AlignCenter)
			
		# Set Row-Col Span
		Ui_DTR.TBLdtr.setSpan(0,0,2,1)
		Ui_DTR.TBLdtr.setSpan(0,1,1,2)
		Ui_DTR.TBLdtr.setSpan(0,3,1,2)
		Ui_DTR.TBLdtr.setSpan(0,5,1,2)
		Ui_DTR.TBLdtr.setSpan(9,0,1,5)

		# disable editable cells
		for i in range(2,10):
			index = 0
			for x in range(1,7):
				item = QtWidgets.QTableWidgetItem()
				item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled) #Disable item edit
				Ui_DTR.TBLdtr.setItem(i, x, item)
				index = index + 1

		
		
		
		# Table Attributes
		Ui_DTR.TBLdtr.horizontalHeader().setVisible(False)
		Ui_DTR.TBLdtr.horizontalHeader().setCascadingSectionResizes(False)
		Ui_DTR.TBLdtr.horizontalHeader().setDefaultSectionSize(100)
		Ui_DTR.TBLdtr.horizontalHeader().setHighlightSections(False)
		Ui_DTR.TBLdtr.horizontalHeader().setSortIndicatorShown(False)
		Ui_DTR.TBLdtr.horizontalHeader().setStretchLastSection(True)
		Ui_DTR.TBLdtr.verticalHeader().setVisible(False)
		Ui_DTR.TBLdtr.verticalHeader().setCascadingSectionResizes(False)
		Ui_DTR.TBLdtr.verticalHeader().setHighlightSections(False)
		Ui_DTR.TBLdtr.verticalHeader().setSortIndicatorShown(False)
		Ui_DTR.TBLdtr.verticalHeader().setStretchLastSection(False)

		# Label Position
		font.setBold(True)
		LBPostion = QtWidgets.QLabel(DTRGroup)
		LBPostion.setGeometry(QtCore.QRect(420, 13, 71, 11))
		LBPostion.setFont(font)
		LBPostion.setObjectName("LBPostion")

		# Input Position
		font.setBold(False)
		font.setWeight(50)
		Ui_DTR.LEPostion = QtWidgets.QLineEdit(DTRGroup)
		Ui_DTR.LEPostion.setGeometry(QtCore.QRect(500, 12, 321, 18))
		Ui_DTR.LEPostion.setFont(font)
		Ui_DTR.LEPostion.setObjectName("LEPostion")

		# Set Name
		Ui_DTR.LEName.setText(Ui_DTR.Employees[page])

		# Add to List
		Ui_DTR.DTR_Pages.append(DTRPage)

		# Add to Stack
		Ui_DTR.DTRStack.addWidget(Ui_DTR.DTR_Pages[page])

		# Set Text Vertical Header
		index = 0
		vheader= ['1','2','3','4','5','6','7','8','9','10']
		for x in vheader:
			item = Ui_DTR.TBLdtr.verticalHeaderItem(0)
			item.setText(_translate("DashbaordWindow", x))
			index = index + 1

		# Set Text Horizontal Header First Row
		index = 0
		hheader = ['Date','Time In','Time Out','Time In','Time Out','Reg Hrs.','Overtime',]    
		for x in hheader:
			item = Ui_DTR.TBLdtr.horizontalHeaderItem(0)
			item.setText(_translate("DashbaordWindow", x))
			index = index + 1

		# Set Text @ Span (Row & Column)
		span_col = [0,1,3,5]
		hheader_span = ['Date','AM','PM','TOTAL HOURS']
		index = 0
		while index < len(span_col):
			item = Ui_DTR.TBLdtr.item(0, span_col[index])
			item.setText(_translate("DashbaordWindow", hheader_span[index]))
			index = index + 1 

		# Set Text Horizontal Header Second Row
		index = 1 # Header Start @ 1 in Second Row
		hheader2 = ['Time In','Time Out','Time In','Time Out','Reg Hrs.','Overtime']    
		for x in hheader2:
			item = Ui_DTR.TBLdtr.item(1, index)
			item.setText(_translate("DashbaordWindow", x))
			index = index + 1

		# Dates
		index = 0
		for x in range(2,9):
			item = Ui_DTR.TBLdtr.item(x, 0)
			item.setText(_translate("DashbaordWindow", Ui_DTR.Dates[index]))
			index = index + 1
		
		item = Ui_DTR.TBLdtr.item(9, 0)
		Ui_DTR.LBDateDTR.setText(_translate("DashbaordWindow", Ui_DTR.Date_title))

		# Footer
		item.setText(_translate("DashbaordWindow", "Total Hours"))

		#Set Text Defaults
		LBName.setText(_translate("DashbaordWindow", "Name      :"))
		Ui_DTR.LEName.setPlaceholderText(_translate("DashbaordWindow", "Employee Name"))
		Ui_DTR.TBLdtr.setSortingEnabled(False)
		LBPostion.setText(_translate("DashbaordWindow", "Position  :"))
		Ui_DTR.LEPostion.setPlaceholderText(_translate("DashbaordWindow", "Employee Position"))

class Ui_Payroll(object):

	TBLPayroll = "" # Table Payroll
	PDList = "" # Payroll Date List

	#Employee Sample List (Default Null)
	Employees = 9 # List of Employees in Specific Project Default 9 Rows For Initial Display

	LBDate = "" # Payroll Date Title (Week)
	week_title = "Week Title"  # Week Title Default
	weekstart=[]
	weekvalue=0

	def printPayroll():
		cursor = con.cursor()
		cursor.execute(f"SELECT * FROM `projects` WHERE `project_id` = {Ui_DTR.projectid}")
		res = cursor.fetchall()

		projname=res[0][1]
		projsite=res[0][3]


		xlApp = win32.Dispatch('Excel.Application')
		xlApp.Visible = True

		# create a new excel workbook
		wb = xlApp.Workbooks.Add()

		# create a new excel worksheet
		ws = wb.worksheets.add
		ws.name = 'Payroll'

		rows = []
		columnHeaders = ["","","","","","","","","","","","","","",""]
		count=1
		maxRow=Ui_Payroll.TBLPayroll.rowCount()+5

		ws.Range(ws.cells(6, 1),ws.cells(12, 15)).verticalalignment=-4108
		ws.Range(ws.cells(6, 1),ws.cells(maxRow, len(columnHeaders))).horizontalalignment=-4108
		ws.Range(ws.Cells(maxRow,4),ws.Cells(maxRow,7)).MergeCells = True
		

		#horizontal border
		ws.Range(ws.cells(6, 1),ws.cells(maxRow, 15)).Borders(3).Weight = 3
		ws.Range(ws.cells(maxRow+1,4),ws.cells(maxRow+1, 15)).Borders(3).Weight = 3

		#vertical border
		ws.Range(ws.cells(6, 1),ws.cells(maxRow-1, 15)).Borders(2).Weight = 3
		ws.Range(ws.cells(maxRow,3),ws.cells(maxRow, 15)).Borders(2).Weight = 3

		#names on left
		ws.Range(ws.cells(7, 2),ws.cells(maxRow, 2)).horizontalalignment=-4131



		# retrieve table content
		for row in range(Ui_Payroll.TBLPayroll.rowCount()):
			record = []
			if row==0:
				hheader = [' ','Name','Position','Rate\n(Day)','Rate\n(Hrs.)','Total\nReg.\nHrs.','O.T.\nHrs.','Amount\nReg.','Amount\nO.T.','Allowan\nce','Total\nAmount','Cash\nAdv.','Less\n(C.A.)','Balance','Net. Pay']
				rows.append(hheader)
			else:
				for col in range(Ui_Payroll.TBLPayroll.columnCount()):
					if (col==0)&((row<(Ui_Payroll.TBLPayroll.rowCount())) & (row>0)):
						if row==Ui_Payroll.TBLPayroll.rowCount()-1:
							record.append(" ")
						else:
							record.append(count)
						count=count+1 

					record.append(Ui_Payroll.TBLPayroll.item(row, col).text())
				rows.append(record)



		# insert table content to Excel
		ws.Range(ws.cells(6, 1),ws.cells(len(rows)+5, len(columnHeaders))).value = rows

		ws.cells(2, 2).value = "Project"
		ws.cells(3, 2).value = "Site"
		ws.cells(4, 2).value = "Subject"
		ws.cells(5, 2).value = "Period"

		ws.cells(2, 3).value = f": {projname}"
		ws.cells(3, 3).value = f": {projsite}"
		ws.cells(4, 3).value = f": Payroll"
		ws.cells(5, 3).value = f": {Ui_Payroll.LBDate.text()}"

		ws.Range(ws.Cells(2,3),ws.Cells(2,7)).MergeCells = True
		ws.Range(ws.Cells(3,3),ws.Cells(3,7)).MergeCells = True
		ws.Range(ws.Cells(4,3),ws.Cells(4,7)).MergeCells = True
		ws.Range(ws.Cells(5,3),ws.Cells(5,7)).MergeCells = True

		ws.Columns.AutoFit()
		ws.PageSetup.Orientation = 2

		#ws.PrintOut()        

	def resetTable():
		while Ui_Payroll.TBLPayroll.rowCount()>1:
			Ui_Payroll.TBLPayroll.removeRow(1)

		Ui_Payroll.LBDate.setText(Ui_Payroll.week_title)
		Ui_Payroll.BtnPrint.hide()


	def  getdtrinfo(item):
		# Insert Data in the table
	
		Ui_Payroll.weekvalue=item.value
			
		Ui_Payroll.LBDate.setText(Ui_DTR.week_list2[Ui_Payroll.weekvalue])

		Ui_Payroll.get_payrolldata()
		Ui_Payroll.BtnPrint.show()

	def insert_week():
		Ui_DTR.getEmployees()
		Ui_DTR.week_list = []
		startdate=""
		enddate=""

		Ui_Payroll.weekstart=[]

		try:
			cursor = con.cursor()
			cursor.execute(f"SELECT * FROM `projects` WHERE `project_id`={Ui_DTR.projectid}")
			res = cursor.fetchall()
			for x in res:
				startdate=QDate(Ui_DTR.process_date(x[4]))
				enddate=QDate(Ui_DTR.process_date(x[5]))




			while startdate<enddate:
				week=""
				Ui_Payroll.weekstart.append(startdate.toString("yyyy,MM,dd"))
				for i in range(0,7):    
					if i==0:
						week= week+startdate.toString("MM/dd/yyyy")
					if startdate==enddate:
						week = startdate.toString("MM/dd/yyyy")+"  -  "+week
						Ui_DTR.week_list.append(week)
						break
					if i==6:
						week = startdate.toString("MM/dd/yyyy")+"  -  "+week
						Ui_DTR.week_list.append(week)

					startdate=startdate.addDays(1)
				
		

		except:
			Dialog.msg_dialog(str(sys.exc_info()))  

		Ui_Payroll.PDList.clear()
		index = 0
		while index < len(Ui_DTR.week_list):
			item = QtWidgets.QListWidgetItem()
			item.setTextAlignment(QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
			item.setBackground(QColor('#666666')) if (index % 2) == 0 else item.setBackground(QColor('#595959'))
			item.value=index
			Ui_Payroll.PDList.addItem(item)
			item = Ui_Payroll.PDList.item(index)
			item.setText(Ui_DTR.week_list[index])
			index = index + 1

	def get_payrolldata():
		cursor = con.cursor()
		try:
			
			cursor.execute(f"SELECT * FROM `projecte` WHERE `project_id`={Ui_DTR.projectid}")
			res = cursor.fetchall()
			Ui_Payroll.Employees = len(res) # Number of Employees Based on DB (Row Count)

		except:
			Dialog.msg_dialog(str(sys.exc_info()))

		
		# Call Insert payroll First to Generate Format
		Ui_Payroll.InsertPayroll()
		

		 # Font Properties
		font = QtGui.QFont()
		font.setBold(False)

		totals = [0, # Total Reg Hrs of All Employee
				  0, # Total OT Hrs of All Employee
				  0, # Total Amount Regular of All Employee
				  0, # Total Amount Over Time of All Employee
				  0, # Total Allowance of All Employee
				  0, # Total Amount for All Employee
				  0, # Total Cash Advance of All Employee
				  0, # Total Amount Less CA of All Employee
				  0, # Total Balance of All Employee
				  0] # Total Net Pay 

		#Set Cell Data (Payroll Data)
		#Initialize array (For Arrangement of Data - To Insert data from cell index 0 to 13 Respectively)
		payroll_data = [] # Default Null 
			

		# Fetch data from db  and append it on the array ()
		try:
			cursor.execute(f"SELECT * FROM `project_payroll` WHERE `project_id`={Ui_DTR.projectid} AND `startDate`='{Ui_Payroll.weekstart[Ui_Payroll.weekvalue]}'")
			res = cursor.fetchall()

			for k in res:
				row=[]
				row.append(k[5])
				row.append(k[6])
				row.append(k[15])
				row.append(k[7])
				row.append(k[8])
				row.append(k[9])
				row.append(k[16])
				row.append(k[17])
				row.append(k[10])
				row.append(k[18])
				row.append(k[11])
				row.append(k[12])
				row.append(k[13])
				row.append(k[14])

				payroll_data.append(row)
		

		except mysql.connector.Error as e:
			Dialog.msg_dialog(str(e))


		index = 1 # Start Row Index 1
		for x in range(0,Ui_Payroll.Employees):
			
		 
			# Set Cell Data Based on Array Values (Retrieve & Derived Values)
			for i in range(0,14): # 14 Columns
				item = QtWidgets.QTableWidgetItem()
				item.setFont(font)
				item.setTextAlignment(QtCore.Qt.AlignCenter)
				item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
				Ui_Payroll.TBLPayroll.setItem(index, i, item) # Start at Row index 1 (After Header)
				
				# Set Text
				item = Ui_Payroll.TBLPayroll.item(index, i)
				item.setText(str(payroll_data[x][i]))

			# Add All Totals
			total_index = 6 # Start At Total Reg Hrs
			for o in range(0,8):
				if (o ==0) |(o ==1)  :
					totals[o] = totals[o] + int(payroll_data[x][total_index]) # Accumulate Values Every Set of Arrays
				else:
					totals[o] = totals[o] + float(payroll_data[x][total_index])


				total_index = total_index + 1

			index = index + 1 # Increment For Another Row
		

		# Set Text Totals
		index = 0
		font.setBold(True)
		for x in range(6,14):
			item = QtWidgets.QTableWidgetItem()
			item.setFont(font)
			item = Ui_Payroll.TBLPayroll.item(Ui_Payroll.Employees+ 1, x)
			item.setText(str(totals[index]))   
			index = index + 1


	def InsertPayroll():

		#set Fix Row Count (Total Employees)
		Ui_Payroll.TBLPayroll.setRowCount(Ui_Payroll.Employees + 2) # Add 2 Row for Header and Footer
		
		# Font Properties
		font = QtGui.QFont()
		font.setBold(True)
		font.setWeight(75)

		#Add Headers
		hheader = ['Name','Position','Rate (Day)','Rate (Hrs.)','Total Reg. Hrs.','O.T. Hrs.','Amount Reg.','Amount O.T.','Allowance','Total Amount','Cash Adv.','Less (C.A.)','Balance','Net. Pay']
		for x in range(0,14):
			item = QtWidgets.QTableWidgetItem()
			item.setFont(font)
			item.setTextAlignment(QtCore.Qt.AlignCenter)
			item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
			Ui_Payroll.TBLPayroll.setItem(0, x, item)
			item = Ui_Payroll.TBLPayroll.item(0, x)
			item.setText(hheader[x])

		#Set Employee Name (Add Item) (Default Null)
		for x in range(1,Ui_Payroll.Employees + 1): # From Row index 1 up top Last index - 1
			for i in range(0,14): # 14 Columns
				item = QtWidgets.QTableWidgetItem()
				item.setTextAlignment(QtCore.Qt.AlignCenter)
				item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
				Ui_Payroll.TBLPayroll.setItem(x, i, item) # Start at Row index 1 (After Header)

		# Footer Default Null (Not Editable)
		for x in range(0,14):
			item = QtWidgets.QTableWidgetItem()
			item.setFont(font)
			item.setTextAlignment(QtCore.Qt.AlignCenter)
			item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
			Ui_Payroll.TBLPayroll.setItem(Ui_Payroll.Employees + 1, x, item)
			if x == 2:
				item = Ui_Payroll.TBLPayroll.item(Ui_Payroll.Employees+ 1, 2)
				item.setText("Total")

		#setSpan (Footer Content)
		Ui_Payroll.TBLPayroll.setSpan(Ui_Payroll.Employees + 1,0,1,2)
		Ui_Payroll.TBLPayroll.setSpan(Ui_Payroll.Employees + 1,2,1,2)

	def Payroll(PayrollWidget,BtnBack,ProjectTab):


		# -------------------Payroll---------------------

		font = QtGui.QFont()
		font.setFamily("Calibri")
		font.setPointSize(16)
		font.setBold(True)
		font.setWeight(75)

		LBPayroll = QtWidgets.QLabel(PayrollWidget)
		LBPayroll.setGeometry(QtCore.QRect(10, 10, 271, 31))
		LBPayroll.setFont(font)
		LBPayroll.setStyleSheet("color: rgb(255, 255, 255);")
		LBPayroll.setAlignment(QtCore.Qt.AlignCenter)
		LBPayroll.setObjectName("LBPayroll")
		LBPayroll.setText("Payroll")

		# Print Payroll Buttton
		font.setPointSize(12)
		Ui_Payroll.BtnPrint = QtWidgets.QPushButton(PayrollWidget)
		Ui_Payroll.BtnPrint.setGeometry(QtCore.QRect(100, 370, 100, 31))
		Ui_Payroll.BtnPrint.setFont(font)
		Ui_Payroll.BtnPrint.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
		Ui_Payroll.BtnPrint.setStyleSheet("background-color: rgb(0, 0, 0.9);color: rgb(255, 255, 255);border-radius:5px;")
		icon = QtGui.QIcon()
		icon.addPixmap(QtGui.QPixmap(":/Icons/Assets/PrintIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
		Ui_Payroll.BtnPrint.setIcon(icon)
		Ui_Payroll.BtnPrint.setObjectName("BtnPrint")
		# Set Text Default
		Ui_Payroll.BtnPrint.setText(" Print")

		# Scroll Area (Payroll Week List)
		DateScroll = QtWidgets.QScrollArea(PayrollWidget)
		DateScroll.setEnabled(True)
		DateScroll.setGeometry(QtCore.QRect(10, 50, 281, 301))
		DateScroll.setStyleSheet("background-color: rgb(120, 120,120,.3);border-radius:8px;")
		DateScroll.setWidgetResizable(True)
		DateScroll.setObjectName("DateScroll")

		# Payroll List Widget
		PayrollDate = QtWidgets.QWidget()
		PayrollDate.setEnabled(True)
		PayrollDate.setGeometry(QtCore.QRect(0, 0, 281, 301))
		PayrollDate.setObjectName("PayrollDate")
		DateScroll.setWidget(PayrollDate)

		#Payroll List
		Ui_Payroll.PDList = QtWidgets.QListWidget(PayrollDate)
		Ui_Payroll.PDList.setGeometry(QtCore.QRect(0, 0, 281, 301))
		Ui_Payroll.PDList.setLayoutDirection(QtCore.Qt.RightToLeft)
		Ui_Payroll.PDList.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
		Ui_Payroll.PDList.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
		Ui_Payroll.PDList.setObjectName("PDList")
		Ui_Payroll.PDList.setStyleSheet("background-color: rgb(167, 167, 167,.4);\n"
									"border-radius:5px;\n"
									"font-size:18px;\n"
									"color:white;\n"

									"")


		# Label Date Week Title
		font.setBold(True)
		font.setPointSize(16)
		Ui_Payroll.LBDate = QtWidgets.QLabel(PayrollWidget)
		Ui_Payroll.LBDate.setGeometry(QtCore.QRect(310, 10, 311, 31))
		Ui_Payroll.LBDate.setFont(font)
		Ui_Payroll.LBDate.setStyleSheet("background-color: rgb(148, 0, 2,.4);border-radius:8px;color:white;")
		Ui_Payroll.LBDate.setAlignment(QtCore.Qt.AlignCenter)
		Ui_Payroll.LBDate.setObjectName("LBDate")

		font.setPointSize(12)

		# Payroll Group
		Payroll = QtWidgets.QGroupBox(PayrollWidget)
		Payroll.setGeometry(QtCore.QRect(310, 50, 741, 371))
		Payroll.setStyleSheet("border:none;color:white;")
		Payroll.setObjectName("Payroll")

		# BG Payroll
		BGPayroll = QtWidgets.QLabel(Payroll)
		BGPayroll.setGeometry(QtCore.QRect(0, 0, 741, 371))
		BGPayroll.setStyleSheet("background-color: rgb(148, 0, 2,.4);border-radius:8px;")
		BGPayroll.setObjectName("BGPayroll")

		# Payroll Table
		font.setPointSize(12)
		Ui_Payroll.TBLPayroll = QtWidgets.QTableWidget(Payroll)
		Ui_Payroll.TBLPayroll.setGeometry(QtCore.QRect(10, 5, 721, 350))
		Ui_Payroll.TBLPayroll.setFont(font)
		Ui_Payroll.TBLPayroll.setStyleSheet("QTableWidget::item{border:1px solid white;}QTableWidget{color:white;background-color: rgb(50, 0, 0,.7);border-radius:5px;border:1px solid white;}")
		Ui_Payroll.TBLPayroll.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
		Ui_Payroll.TBLPayroll.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
		Ui_Payroll.TBLPayroll.setAutoScroll(True)
		Ui_Payroll.TBLPayroll.setVerticalScrollMode(QtWidgets.QAbstractItemView.ScrollPerPixel)
		Ui_Payroll.TBLPayroll.setHorizontalScrollMode(QtWidgets.QAbstractItemView.ScrollPerPixel)
		Ui_Payroll.TBLPayroll.setObjectName("TBLPayroll")
		Ui_Payroll.TBLPayroll.setColumnCount(14)
		Ui_Payroll.TBLPayroll.horizontalHeader().setVisible(False)
		Ui_Payroll.TBLPayroll.horizontalHeader().setCascadingSectionResizes(False)
		Ui_Payroll.TBLPayroll.horizontalHeader().setDefaultSectionSize(200)
		Ui_Payroll.TBLPayroll.horizontalHeader().setHighlightSections(False)
		Ui_Payroll.TBLPayroll.horizontalHeader().setSortIndicatorShown(False)
		Ui_Payroll.TBLPayroll.horizontalHeader().setStretchLastSection(False)
		Ui_Payroll.TBLPayroll.verticalHeader().setVisible(False)
		Ui_Payroll.TBLPayroll.verticalHeader().setCascadingSectionResizes(False)
		Ui_Payroll.TBLPayroll.verticalHeader().setHighlightSections(True)
		Ui_Payroll.TBLPayroll.verticalHeader().setSortIndicatorShown(False)
		Ui_Payroll.TBLPayroll.verticalHeader().setStretchLastSection(False)

		# Table Properties
		column_size = [220,150,90,90,120,90,120,120,120,120,120,120,120,120]
		for x in range(0,14):
			Ui_Payroll.TBLPayroll.setColumnWidth(x,column_size[x])

		# Produce Table
		Ui_Payroll.InsertPayroll()


		# sample List Item
		item = QtWidgets.QListWidgetItem()
		item.setTextAlignment(QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
		Ui_Payroll.PDList.addItem(item)
		item = Ui_Payroll.PDList.item(0)
		item.setText("New Item")

		# Sample >> Function
		Ui_Payroll.BtnPrint.clicked.connect(lambda: Ui_Payroll.printPayroll())
		Ui_Payroll.BtnPrint.hide()



		# selection function
		Ui_Payroll.PDList.itemClicked.connect(Ui_Payroll.getdtrinfo)

